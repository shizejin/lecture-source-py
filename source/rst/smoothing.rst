.. _smoothing:

.. include:: /_static/includes/header.raw

.. highlight:: python3


******************************************************************
Consumption and Tax Smoothing with Complete and Incomplete Markets
******************************************************************


.. index::
    single: Consumption; Tax

.. contents:: :depth: 2

In addition to what's in Anaconda, this lecture will need the  library:

.. code-block:: ipython
  :class: hide-output

  !pip install --upgrade quantecon


Overview
========



This lecture describes two types of consumption-smoothing and tax-smoothing models

* one is in the **complete markets** tradition of Lucas and Stokey :cite:`LucasStokey1983`

* the other is in the **incomplete markets** tradition  of Hall :cite:`Hall1978` and Barro :cite:`Barro1979`

*Complete markets* allow a consumer or government to buy or sell claims contingent on all possible states of the world.

*Incomplete markets* allow a consumer or government to buy or sell only a limited set of securities, often only a single risk-free security.

Hall :cite:`Hall1978` and Barro :cite:`Barro1979` both worked in an incomplete markets traditions by assuming
that the only asset that can be traded is a risk-free one period bond.

Hall assumed an exogenous stochastic process of nonfinancial income and
an exogenous gross interest rate on one period risk-free debt that equals
:math:`\beta^{-1}`, where :math:`\beta \in (0,1)` is also a consumer's
intertemporal discount factor.

Barro :cite:`Barro1979` made an analogous assumption about the risk-free interest
rate in a tax-smoothing model that turns out to have the same mathematical structure as Hall's
consumption-smoothing model.

To get Barro's model from Hall's, all we have to do is to rename variables

We maintain Hall and Barro's assumption about the interest rate when we describe an
incomplete markets version of our model.

In addition, we extend their assumption about the interest rate to an appropriate counterpart to create a "complete markets" model in the style of
Lucas and Stokey :cite:`LucasStokey1983`.

While we are equally interested in consumption-smoothing and tax-smoothing
models, in this lecture  we mostly focus mainly on  consumption-smoothing
versions of these models.

But for each version of a consumption-smoothing model, there is a tax-smoothing counterpart obtained simply by

*  relabeling consumption as tax collections 

*  relabeling a consumer's  nonfinancial income as a government's purchases 

*  relabeling a consumer's *debt* as a government's *assets*

For elaborations on this theme, please see :doc:`perm_income_cons` and later parts of this lecture.

We'll consider two closely related alternative assumptions about the consumer's
exogenous nonfinancial income process (or in the tax-smoothing
interpretation, the government's exogenous expenditure process):

*  that it is generated by  a finite :math:`N` state Markov chain (setting :math:`N=2` most of the time)

*  that it is described by a linear state space model with a continuous
   state vector in :math:`{\mathbb R}^n` driven by a Gaussian vector IID shock
   process

We'll spend most of this lecture studying the finite-state Markov specification, but will briefly treat the linear state space specification before concluding.

Let's start with some imports:

.. code-block:: ipython

    import numpy as np
    import quantecon as qe
    import matplotlib.pyplot as plt
    %matplotlib inline
    import scipy.linalg as la

Relationship to Other Lectures
------------------------------

This lecture can be viewed as a followup to :doc:`perm_income_cons` and  a warm-up for a model of tax smoothing described in :doc:`opt_tax_recur`.

Linear-quadratic versions of the Lucas-Stokey tax-smoothing model are described in :doc:`lqramsey`.

The key difference between those lectures and this one is

* Here the decision-maker  takes all prices as exogenous, meaning that his decisions do not affect them.

* In :doc:`lqramsey` and :doc:`opt_tax_recur`, the decision-maker -- the government in the case of these lectures -- recognizes that its decisions affect prices.

So these later lectures are partly about how a government  optimally  manipulate prices of government debt, albeit indirectly via the effects that distorting
taxes have on equilibrium prices and allocations



Background
==========

Outcomes in consumption-smoothing (or tax-smoothing) models emerge from two
sources:

*  a decision-maker -- a consumer in the consumption-smoothing model or
   a government in the tax-smoothing model -- who wants to maximize an
   intertemporal objective function that expresses its preference for
   paths of consumption (or tax collections) that are *smooth* in the
   sense of  varying as little as possible across time and realized Markov states

*  a set of trading opportunities that allow the optimizer to transform
   a possibly erratic nonfinancial income (or government expenditure)
   process into a smoother consumption (or tax collections) process by
   purchasing or selling financial securities

In the complete markets version of the model, each period the consumer
can buy or sell one-period ahead state-contingent securities whose
payoffs depend on next period's realization of the Markov state.

In the two-state Markov chain case,  two such securities are traded  each period.

In an :math:`N` state Markov state version of the model,  :math:`N` such securities are traded each period.

These state-contingent securities are commonly called Arrow securities, after `Kenneth Arrow <https://en.wikipedia.org/wiki/Kenneth_Arrow>`

In the incomplete markets version of the model, the consumer can buy and sell only one security each period, a risk-free bond with gross return :math:`\beta^{-1}`.



Finite State Markov Income Process
----------------------------------


In each version of the consumption-smoothing model, nonfinancial income is governed by a two-state Markov chain (it's easy to generalize this to an :math:`N` state Markov chain).

In particular, the *state of the world* is given by :math:`s_t` that follows
a Markov chain with transition probability matrix

.. math::

    P_{ij} = \mathbb P \{s_{t+1} = \bar s_j \,|\, s_t = \bar s_i \}


where :math:`\mathbb P` means conditional probability

Nonfinancial income :math:`\{y_t\}` obeys

.. math::

    y_t =
    \begin{cases}
        \bar y_1 & \quad \text{if } s_t = \bar s_1 \\
        \bar y_2 & \quad \text{if } s_t = \bar s_2
    \end{cases}


A consumer wishes to maximize

.. math::
    :label: cs_1

    \mathbb E
    \left[
        \sum_{t=0}^\infty \beta^t u(c_t)
    \right]
    \quad
    \text{where} \quad
    u(c_t) = - (c_t -\gamma)^2
    \quad \text{and} \quad
     0 < \beta < 1


Remark About Isomorphism
^^^^^^^^^^^^^^^^^^^^^^^^


We can regard these as tax-smoothing models if we set
:math:`c_t = T_t` and :math:`G_t = y_t`, where :math:`T_t` is total tax
collections and :math:`\{G_t\}` is an exogenous government expenditures
process.  

As mentioned earlier, for much of this lecture we shall focus on the consumption-smoothing interpretation of our models.

Market Structure
----------------

Our complete and incomplete markets models  differ in how effectively the market structure allows a
consumer to transfer resources across time and Markov states, there
being more transfer opportunities in the complete markets setting than
in the incomplete markets setting.

Watch how these differences in opportunities affect

-  how smooth consumption is across time and Markov states

-  how the consumer chooses to make his levels of indebtedness behave
   over time and across Markov states




Model 1 (Complete Markets)
==========================



At each date :math:`t \geq 0`, the consumer trades **one-period ahead
Arrow securities**.

We assume that prices of these securities are exogenous to the consumer
(or in the tax-smoothing version of the model, to the government).

*Exogenous* means that they are unaffected by the  decision-maker.

In Markov state :math:`s_t` at time :math:`t`, one unit of consumption
in state :math:`s_{t+1}` at time :math:`t+1` costs :math:`q(s_{t+1} \,|\, s_t)` units of the time :math:`t` consumption good.

At time :math:`t=0`, the consumer starts with an inherited level of debt
due at time :math:`0` of :math:`b_0` units of time :math:`0` consumption
goods.

The consumer's budget constraint at :math:`t \geq 0` in Markov
state :math:`s_t` is

.. math::
    :label: cs_budget1

    c_t + b_t
    \leq y(s_t) +
    \sum_j  q(\bar s_j \,|\, s_t ) \, b_{t+1}(\bar s_j \,|\, s_t)


where :math:`b_t` is the consumer's one-period debt that falls due at time :math:`t` and  :math:`b_{t+1}(\bar s_j\,|\, s_t)` are the consumer's time
:math:`t` sales of the  time :math:`t+1` consumption good in Markov state :math:`\bar s_j`, a source of time :math:`t` revenues.

A natural analog of Hall's assumption that the one-period risk-free gross
interest rate is :math:`\beta^{-1}` is

.. math::
    :label: cs_2

    q(\bar s_j \,|\, \bar s_i) = \beta P_{ij}


To understand this, observe that in state :math:`\bar s_i` it costs :math:`\sum_j q(\bar s_j \,|\, \bar s_i)`  to purchase one unit of consumption next period *for sure*, i.e., meaning no matter what state of the world  occurs at :math:`t+1`.

Hence the implied price of a risk-free claim on one unit of consumption next
period is

.. math::

    \sum_j q(\bar s_j \,|\, \bar s_i) =  \sum_j \beta P_{ij} =  \beta


This confirms the sense in which  :eq:`cs_2` is a natural counterpart to Hall's assumption about the
risk-free one-period interest rate.

First-order necessary conditions for maximizing the consumer's expected utility subject to the sequence of budget constraints :eq:`cs_budget1` are

.. math::

    \beta \frac{u'(c_{t+1})}{u'(c_t) } \mathbb P\{s_{t+1}\,|\, s_t \}
        = q(s_{t+1} \,|\, s_t)


or, under our assumption :eq:`cs_2` about the values taken by  Arrow security prices,

.. math::
    :label: cs_3

    c_{t+1} = c_t


Thus, our consumer sets :math:`c_t = \bar c` for all :math:`t \geq 0` for some value :math:`\bar c` that it is our job now to determine along with 
values for :math:`b_{t+1}(\bar s_j | s_t = \bar s_i)` for :math:`i=1,2` and :math:`j = 1,2`

We'll use a *guess and verify* method

**Guess:** We'll make the plausible guess that

.. math::
    :label: eq_guess

    b_{t+1}(s_{t+1} = \bar s_j \,|\, s_t = \bar s_i) = b(\bar s_j) ,
            \quad i=1,2; \;\; j= 1,2


so that the amount borrowed today turns out to depend only on *tomorrow's* Markov state. (Why is this is a plausible guess?)

To determine :math:`\bar c`, we shall pursue implications of the consumer's budget constraints in each Markov state today and  our guess :eq:`eq_guess` about the consumer's debt level choices.

For :math:`t \geq 1`, these imply

.. math::
    :label: cs_4a

    \begin{aligned}
        \bar c + b(\bar s_1) & = y(\bar s_1) + q(\bar s_1\,|\, \bar s_1) b(\bar s_1) + q(\bar s_2 \,|\, \bar s_1)  b(\bar s_2) \cr
        \bar c + b(\bar s_2) & = y(\bar s_2) + q(\bar s_1\,|\, \bar s_2) b(\bar s_1) + q(\bar s_2 \,|\, \bar s_2) b(\bar s_2)
    \end{aligned}


or

.. math::

    \begin{bmatrix}
       b(\bar s_1) \cr b(\bar s_2)
    \end{bmatrix} +
    \begin{bmatrix}
    \bar c \cr \bar c
    \end{bmatrix} =
    \begin{bmatrix}
        y(\bar s_1) \cr y(\bar s_2)
    \end{bmatrix} +
    \beta
    \begin{bmatrix}
        P_{11} & P_{12} \cr P_{21} & P_{22}
    \end{bmatrix}
    \begin{bmatrix}
        b(\bar s_1) \cr b(\bar s_2)
    \end{bmatrix}


These are :math:`2` equations in the :math:`3` unknowns
:math:`\bar c, b(\bar s_1), b(\bar s_2)`.

To get a third equation, we assume that at time :math:`t=0`, :math:`b_0`
is the debt due; and we assume that at time :math:`t=0`, the Markov
state is :math:`\bar s_1`.

(We could instead have assumed that at time :math:`t=0` the Markov state :math:`s_0 = \bar s_2`)

Since weh have  assumed that :math:`s_0 = \bar s_1`,  the budget constraint at time :math:`t=0` is

.. math::
    :label: cs_5

    \bar c + b_0 = y(\bar s_1) + q(\bar s_1 \,|\, \bar s_1) b(\bar s_1) + q(\bar s_2\,|\,\bar s_1) b(\bar s_2)


If we substitute  :eq:`cs_5` into the first equation of :eq:`cs_4a` and rearrange, we
discover that

.. math::
    :label: cs_6

    b(\bar s_1) = b_0


We can then use the second equation of :eq:`cs_4a`  to deduce the restriction

.. math::
    :label: cs_7

    y(\bar s_1) - y(\bar s_2) + [q(\bar s_1\,|\, \bar s_1) - q(\bar s_1\,|\, \bar s_2) - 1 ] b_0 +
    [q(\bar s_2\,|\,\bar s_1) + 1 - q(\bar s_2 \,|\, \bar s_2) ] b(\bar s_2) = 0 ,


an equation that we can solve for the unknown :math:`b(\bar s_2)`.

Knowing :math:`b(\bar s_1)` and :math:`b(\bar s_2)`, we can solve equation :eq:`cs_5`  for the constant level of consumption :math:`\bar c`.

Key Outcomes
------------

The preceding calculations indicate that in the complete markets version
of our model, we obtain the following striking results:

*  The consumer chooses to make consumption perfectly constant across
   time and Markov states.

* State-contingent debt purchases :math:`b_{t+1}(s_{t+1} = \bar s_j | s_t = \bar s_i)` depend only on :math:`\bar s_j`


We computed the constant level of consumption :math:`\bar c` and indicated how that level depends on the underlying specifications of preferences, Arrow securities prices,  the stochastic process of exogenous nonfinancial income, and the initial debt level :math:`b_0`

*  The consumer's debt neither accumulates, nor decumulates, nor drifts --
   instead, the debt level each period is an exact function of the Markov
   state, so in the two-state Markov case, it switches between two
   values.

*  We have verified guess :eq:`eq_guess`.

*  When the state :math:`s_t` returns to the initial state :math:`s_0`, debt returns to the initial debt level assumed.

*  Debt levels in all other steates depend on virtually all  remaining parameters of the model.



Code
----

Here's some code that, among other things, contains a function called `consumption_complete()`.

This function computes :math:`b(\bar s_1), b(\bar s_2), \bar c` as outcomes given a set of parameters, under the assumption of complete markets

.. code-block:: python3

    class ConsumptionProblem:
        """
        The data for a consumption problem, including some default values.
        """

        def __init__(self,
                     β=.96,
                     y=[2, 1.5],
                     b0=3,
                     P=[[.8, .2],
                        [.4, .6]],
                     init=0):
            """
            Parameters
            ----------

            β : discount factor
            y : list containing the two income levels
            b0 : debt in period 0 (= state_1 debt level)
            P : 2x2 transition matrix
            init : index of initial state s0
            """
            self.β = β
            self.y = np.asarray(y)
            self.b0 = b0
            self.P = np.asarray(P)
            self.init = init


    def consumption_complete(cp):
        """
        Computes endogenous values for the complete market case.

        Parameters
        ----------

        cp : instance of ConsumptionProblem

        Returns
        -------

            c_bar : constant consumption
            b : optimal debt in each state

        associated with the price system

            Q = β * P
        """
        β, P, y, b0, init = cp.β, cp.P, cp.y, cp.b0, cp.init   # Unpack

        Q = β * P                               # assumed price system

        # construct matrices of augmented equation system
        n = P.shape[0] + 1

        y_aug = np.empty((n, 1))
        y_aug[0, 0] = y[init] - b0
        y_aug[1:, 0] = y

        Q_aug = np.zeros((n, n))
        Q_aug[0, 1:] = Q[init, :]
        Q_aug[1:, 1:] = Q

        A = np.zeros((n, n))
        A[:, 0] = 1
        A[1:, 1:] = np.eye(n-1)

        x = np.linalg.inv(A - Q_aug) @ y_aug

        c_bar = x[0, 0]
        b = x[1:, 0]

        return c_bar, b


    def consumption_incomplete(cp, N_simul=150, random_state=None):
        """
        Computes endogenous values for the incomplete market case.

        Parameters
        ----------

        cp : instance of ConsumptionProblem
        N_simul : int
        random_state : random state for simulating Markov chain
        """
        β, P, y, b0, init = cp.β, cp.P, cp.y, cp.b0, cp.init  # Unpack
        # For the simulation define a quantecon MC class
        mc = qe.MarkovChain(P)

        # Useful variables
        n = len(y)
        y.shape = (n, 1)
        v = np.linalg.inv(np.eye(n) - β * P) @ y

        # Simulate state path
        s_path = mc.simulate(N_simul, init=init, random_state=random_state)

        # Store consumption and debt path
        b_path, c_path = np.ones(N_simul+1), np.ones(N_simul)
        b_path[0] = b0

        # Optimal decisions from (12) and (13)
        db = ((1 - β) * v - y) / β

        for i, s in enumerate(s_path):
            c_path[i] = (1 - β) * (v - b_path[i] * np.ones((n, 1)))[s, 0]
            b_path[i + 1] = b_path[i] + db[s, 0]

        return c_path, b_path[:-1], y[s_path], s_path


Let's test by checking that :math:`\bar c` and :math:`b_2` satisfy the budget constraint



.. code-block:: python3

    cp = ConsumptionProblem()
    c_bar, b = consumption_complete(cp)
    np.isclose(c_bar + b[1] - cp.y[1] - (cp.β * cp.P)[1, :] @ b, 0)



Below, we'll take the outcomes produced by this code -- in particular the implied
consumption and debt paths -- and compare them with outcomes
from an incomplete markets model in the spirit of Hall :cite:`Hall1978` and Barro :cite:`Barro1979` (and also, for those who love history, Gallatin (1807) :cite:`Gallatin`).





Model 2 (One-Period Risk-Free Debt Only)
========================================


This is a version of the original models of Hall (1978) and Barro (1979)
in which the decision-maker's ability to substitute intertemporally is
constrained by his ability to buy or sell only one security, a risk-free
one-period bond bearing a constant gross interest rate that equals
:math:`\beta^{-1}`.

Given an initial debt  :math:`b_0` at time :math:`0`, the
consumer faces a sequence of budget constraints

.. math::

    c_t + b_t = y_t + \beta b_{t+1}, \quad t \geq 0


where :math:`\beta` is the price at time :math:`t` of a risk-free claim
on one unit of time consumption at time :math:`t+1`.

First-order conditions for the consumer's  problem are

.. math::

    \sum_{j} u'(c_{t+1,j}) P_{ij} = u'(c_{t, i})


For our assumed quadratic utility function this implies

.. math::
    :label: cs_8

    \sum_j c_{t+1,j} P_{ij} = c_{t,i}


which is Hall's (1978) conclusion that consumption follows a random walk.

As we saw in our first lecture on the :doc:`permanent income model <perm_income>`, this leads to

.. math::
    :label: cs_9

    b_t = \mathbb E_t \sum_{j=0}^\infty \beta^j y_{t+j} - (1 -\beta)^{-1} c_t


and

.. math::
    :label: cs_10

    c_t = (1-\beta)
        \left[
            \mathbb E_t \sum_{j=0}^\infty \beta^j y_{t+j} - b_t
        \right]


Equation :eq:`cs_10` expresses :math:`c_t` as a net interest rate factor :math:`1 - \beta` times the sum
of the expected present value of nonfinancial income :math:`\mathbb E_t \sum_{j=0}^\infty \beta^j y_{t+j}` and financial wealth :math:`-b_t`.

Substituting :eq:`cs_10`  into the one-period budget constraint and rearranging leads to

.. math::
    :label: cs_11

    b_{t+1} - b_t
    = \beta^{-1} \left[ (1-\beta)
    \mathbb E_t \sum_{j=0}^\infty\beta^j y_{t+j} - y_t    \right]


Now let's do a useful calculation that will yield a convenient expression for the key term :math:`\mathbb E_t \sum_{j=0}^\infty\beta^j y_{t+j}` in our finite Markov chain setting.

Define

.. math::

    v_t := \mathbb E_t \sum_{j=0}^\infty \beta^j y_{t+j}


In our two-state Markov chain setting, :math:`v_t = v(1)` when :math:`s_t= \bar s_1` and :math:`v_t = v(2)` when :math:`s_t=\bar s_2`.

Therefore, we can write

.. math::

    \begin{aligned}
        v(1) & = y(1) + \beta P_{11} v(1) + \beta P_{12} v(2)
        \\
        v(2) & = y(2) + \beta P_{21} v(1) + \beta P_{22} v(2)
    \end{aligned}


or

.. math::

    \vec v = \vec y + \beta P \vec v


where  :math:`\vec v =    \begin{bmatrix} v(1) \cr v(2) \end{bmatrix}` and  :math:`\vec y =  \begin{bmatrix} y(1) \cr y(2) \end{bmatrix}`.

We can also write the last expression as

.. math::

    \vec v = (I - \beta P)^{-1} \vec y


In our finite Markov chain setting, from expression  :eq:`cs_10`,  consumption at date :math:`t` when debt is :math:`b_t` and the Markov state today is :math:`s_t = i` is evidently

.. math::
    :label: cs_12

    c(b_t, i) =  (1 - \beta) \left( [(I - \beta P)^{-1} \vec y]_i - b_t \right)


and the increment in debt is

.. math::
    :label: cs_13

    b_{t+1} - b_t = \beta^{-1} [ (1- \beta) v(i) - y(i) ]


Summary of Outcomes
-------------------

In contrast to outcomes in the complete markets model, in the incomplete
markets model

-  consumption drifts over time as a random walk; the level of
   consumption at time :math:`t` depends on the level of debt that the
   consumer brings into the period as well as the expected discounted
   present value of nonfinancial income at :math:`t`.

-  the consumer's debt drifts upward over time in response to low
   realizations of nonfinancial income and drifts downward over time in
   response to high realizations of nonfinancial income.

-  the drift over time in the consumer's debt and the dependence of
   current consumption on today's debt level account for the drift over
   time in consumption.




The Incomplete Markets Model
----------------------------


The code above also contains a function called `consumption_incomplete()` that uses :eq:`cs_12` and :eq:`cs_13` to

*  simulate paths of :math:`y_t, c_t, b_{t+1}`

*  plot these against values of :math:`\bar c, b(s_1), b(s_2)` found in a corresponding  complete markets economy

Let's try this, using the same parameters in both complete and incomplete markets economies

.. code-block:: python3

    N_simul = 150
    cp = ConsumptionProblem()

    c_bar, debt_complete = consumption_complete(cp)

    c_path, debt_path, y_path, s_path = consumption_incomplete(cp, N_simul=N_simul,
                                                               random_state=1)

    fig, ax = plt.subplots(1, 2, figsize=(15, 5))

    ax[0].set_title('Consumption paths')
    ax[0].plot(np.arange(N_simul), c_path, label='incomplete market')
    ax[0].plot(np.arange(N_simul), c_bar * np.ones(N_simul),
                        label='complete market')
    ax[0].plot(np.arange(N_simul), y_path, label='income', alpha=.6, ls='--')
    ax[0].legend()
    ax[0].set_xlabel('Periods')

    ax[1].set_title('Debt paths')
    ax[1].plot(np.arange(N_simul), debt_path, label='incomplete market')
    ax[1].plot(np.arange(N_simul), debt_complete[s_path],
               label='complete market')
    ax[1].plot(np.arange(N_simul), y_path, label='income', alpha=.6, ls='--')
    ax[1].legend()
    ax[1].axhline(0, color='k', ls='--')
    ax[1].set_xlabel('Periods')

    plt.show()


In the graph on the left, for the same sample path of nonfinancial
income :math:`y_t`, notice that

*  consumption is constant when there are complete markets, but  takes a random walk in the incomplete markets version of the model.

*  the consumer's debt oscillates between two values that are functions
   of the Markov state in the complete markets model, while the
   consumer's debt drifts in a "unit root" fashion in the incomplete
   markets economy.




Relabeling Variables to get tax-smoothing interpretations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


We can simply relabel variables to acquire tax-smoothing interpretations of our two models




.. code-block:: python3

    fig, ax = plt.subplots(1, 2, figsize=(15, 5))

    ax[0].set_title('Tax collection paths')
    ax[0].plot(np.arange(N_simul), c_path, label='incomplete market')
    ax[0].plot(np.arange(N_simul), c_bar * np.ones(N_simul),
               label='complete market')
    ax[0].plot(np.arange(N_simul), y_path, label='govt expenditures',
               alpha=.6, ls='--')
    ax[0].legend()
    ax[0].set_xlabel('Periods')
    ax[0].set_ylim([1.4, 2.1])

    ax[1].set_title('Government assets paths')
    ax[1].plot(np.arange(N_simul), debt_path, label='incomplete market')
    ax[1].plot(np.arange(N_simul), debt_complete[s_path],
               label='complete market')
    ax[1].plot(np.arange(N_simul), y_path, label='govt expenditures', ls='--')
    ax[1].legend()
    ax[1].axhline(0, color='k', ls='--')
    ax[1].set_xlabel('Periods')

    plt.show()






Example: Tax Smoothing with Complete Markets
============================================

It is instructive  to focus on a simple tax-smoothing example with complete markets.

This example will illustrate how, in a complete markets model like that of Lucas and Stokey :cite:`LucasStokey1983`, the government purchases
insurance from the private sector.

    * Purchasing insurance  protects the government against having to  raise taxes too high or issue too much debt in  high government expenditure events.

We assume that government expenditures take one of two values :math:`G_1 < G_2`, where Markov state :math:`1` means "peace" and Markov state :math:`2` means "war".

The government budget constraint in Markov state :math:`i` is

.. math::

    T_i + b_i = G_i + \sum_j Q_{ij} b_j


where

.. math::

    Q_{ij} = \beta P_{ij}


is the price of one unit of goods next period in state :math:`j` when
today's Markov state is :math:`i` and :math:`b_i` is the government's
level of *assets* in Markov state :math:`i`.

That is, :math:`b_i` equals  one-period loans owed to the government that fall due at time :math:`t`.

As above, we'll assume that the initial Markov state is state :math:`1`.

In addition, to simplify our example, we'll set the government's initial
asset level to :math:`0`, so that :math:`b_1 =0`.

Here's our code to compute a quantitative example with zero debt in peace time:

.. code-block:: python3

    # Parameters

    β = .96
    y = [1, 2]
    b0 = 0
    P = np.array([[.8, .2],
                  [.4, .6]])

    cp = ConsumptionProblem(β, y, b0, P)
    Q = β * P

    c_bar, b = consumption_complete(cp)

    print(f"P \n {P}")
    print(f"Q \n {Q}")
    print(f"Govt expenditures in peace and war = {y}")
    print(f"Constant tax collections = {c_bar}")
    print(f"Govt assets in two states = {b}")

    msg = """
    Now let's check the government's budget constraint in peace and war.
    Our assumptions imply that the government always purchases 0 units of the
    Arrow peace security.
    """
    print(msg)

    AS1 = Q[0, 1] * b[1]
    print(f"Spending on Arrow war security in peace = {AS1}")
    AS2 = Q[1, 1] * b[1]
    print(f"Spending on Arrow war security in war = {AS2}")

    print("\n")
    print("Government tax collections plus asset levels in peace and war")
    TB1 = c_bar + b[0]
    print(f"T+b in peace = {TB1}")
    TB2 = c_bar + b[1]
    print(f"T+b in war = {TB2}")

    print("\n")
    print("Total government spending in peace and war")
    G1 = y[0] + AS1
    G2 = y[1] + AS2
    print(f"Peace = {G1}")
    print(f"War = {G2}")

    print("\n")
    print("Let's see ex-post and ex-ante returns on Arrow securities")

    Π = np.reciprocal(Q)
    exret = Π
    print(f"Ex-post returns to purchase of Arrow securities = \n {exret}")
    exant = Π * P
    print(f"Ex-ante returns to purchase of Arrow securities \n {exant}")


Explanation
-----------

In this example, the government always purchase :math:`0` units of the
Arrow security that pays off in peace time (Markov state :math:`1`).

But it purchases a positive amount of the security that pays off in war
time (Markov state :math:`2`).

We recommend plugging the quantities computed above into the government
budget constraints in the two Markov states and staring.

This is an example in which 

*  during peacetime, the government purchases *insurance* against the possibility that war breaks 

*  during wartime, the government purchases *insurance* against the possibility that war continues another period

*  the insurance does not pay off so long as peace continues

*  the insurance pays off when war breaks out or continues

*Exercise:* try changing the Markov transition matrix so that

.. math::

    P = \begin{bmatrix}
            1 & 0 \\
           .2 & .8
        \end{bmatrix}


Also, start the system in Markov state :math:`2` (war) with initial
government assets :math:`- 10`, so that the government starts the
war in debt and :math:`b_2 = -10`.




Linear State Space Version of Complete Markets Model
====================================================

Now we'll use a setting like that in the :doc:`first lecture on the permanent income model <perm_income>`.

In that model, there are

* incomplete markets: the consumer can trade only a single risk-free one-period bond bearing gross one-period risk-free interest rate equal to :math:`\beta^{-1}`.

* the consumer's exogenous nonfinancial income is governed by a linear state space model driven by Gaussian shocks, the kind of model studied in an earlier lecture about :doc:`linear state space models <linear_models>`.

We'll write down a complete markets counterpart of that model.

Suppose that nonfinancial income is governed by the state
space system

.. math::

    \begin{aligned}
         x_{t+1} & = A x_t + C w_{t+1} \cr
         y_t & = S_y x_t
    \end{aligned}


where :math:`x_t` is an :math:`n \times 1` vector and :math:`w_{t+1} \sim {\cal N}(0,I)` is IID over time.

Again, as a counterpart of the Hall-Barro assumption that the risk-free
gross interest rate is :math:`\beta^{-1}`, we assume the scaled prices
of one-period ahead Arrow securities are

.. math::
    :label: cs_14

    p_{t+1}(x_{t+1} \,|\, x_t) = \beta \phi(x_{t+1} \,|\, A x_t, CC')


where :math:`\phi(\cdot \,|\, \mu, \Sigma)` is a multivariate Gaussian
distribution with mean vector :math:`\mu` and covariance matrix
:math:`\Sigma`.

Let :math:`b(x_{t+1})` be a vector of state-contingent debt due at :math:`t+1`
as a function of the :math:`t+1` state :math:`x_{t+1}`.

Using the pricing function assumed in :eq:`cs_14`, the value at
:math:`t` of :math:`b(x_{t+1})` is

.. math::

    \beta \int b(x_{t+1}) \phi(x_{t+1} \,|\, A x_t, CC') d x_{t+1} = \beta  \mathbb E_t b_{t+1}


In the complete markets setting, the consumer faces a sequence of budget
constraints

.. math::

    c_t + b_t = y_t + \beta \mathbb E_t b_{t+1}, \quad t \geq 0


Please note that 

.. math:: 

    E_t b_{t+1} = \int p_{t+1}(x_{t+1} | x_t) b_{t+1}(x_{t+1}) d x_{t+1}  

which verifies that :math:`E_t b_{t+1}` is the value of time :math:`t+1` state-contingent claims issued by the consumer at time :math:`t`
    

We can solve the time :math:`t` budget constraint forward to obtain

.. math::

    b_t = \mathbb E_t  \sum_{j=0}^\infty \beta^j (y_{t+j} - c_{t+j} )


We assume as before that the consumer cares about the expected value
of

.. math::

    \sum_{t=0}^\infty \beta^t u(c_t), \quad 0 < \beta < 1


In the incomplete markets version of the model, we assumed that
:math:`u(c_t) = - (c_t -\gamma)^2`, so that the above utility functional
became

.. math::

    -\sum_{t=0}^\infty \beta^t ( c_t - \gamma)^2, \quad 0 < \beta < 1


But in the complete markets version, it is tractable to assume a more general utility function that satisfies :math:`u' > 0` and :math:`u'' < 0`.

The first-order condition for the consumer's problem with complete
markets and our assumption about Arrow securities prices is

.. math::

    u'(c_{t+1}) = u'(c_t) \quad \text{for all }  t\geq 0


which again implies :math:`c_t = \bar c` for some :math:`\bar c`.

So it follows that

.. math::

    b_t = \mathbb E_t \sum_{j=0}^\infty \beta^j (y_{t+j} - \bar c)


or

.. math::
    :label: cs_15

    b_t = S_y (I - \beta A)^{-1} x_t - \frac{1}{1-\beta} \bar c


where the value of :math:`\bar c` satisfies

.. math::
    :label: cs_16

    \bar b_0 = S_y (I - \beta A)^{-1} x_0 - \frac{1}{1 - \beta } \bar c


where :math:`\bar b_0` is an initial level of the consumer's debt, specified
as a parameter of the problem.

Thus, in the complete markets version of the consumption-smoothing
model, :math:`c_t = \bar c, \forall t \geq 0` is determined by :eq:`cs_16`
and the consumer's debt is a fixed function of
the state :math:`x_t` described by :eq:`cs_15`.


Here's an example that shows how in this setting the availability of insurance against fluctuating nonfinancial income
allows the consumer completely to smooth consumption across time and across states of the world

.. code-block:: python3

    def complete_ss(β, b0, x0, A, C, S_y, T=12):
        """
        Computes the path of consumption and debt for the previously described
        complete markets model where exogenous income follows a linear
        state space
        """
        # Create a linear state space for simulation purposes
        # This adds "b" as a state to the linear state space system
        # so that setting the seed places shocks in same place for
        # both the complete and incomplete markets economy
        # Atilde = np.vstack([np.hstack([A, np.zeros((A.shape[0], 1))]),
        #                   np.zeros((1, A.shape[1] + 1))])
        # Ctilde = np.vstack([C, np.zeros((1, 1))])
        # S_ytilde = np.hstack([S_y, np.zeros((1, 1))])

        lss = qe.LinearStateSpace(A, C, S_y, mu_0=x0)

        # Add extra state to initial condition
        # x0 = np.hstack([x0, np.zeros(1)])

        # Compute the (I - β * A)^{-1}
        rm = la.inv(np.eye(A.shape[0]) - β * A)

        # Constant level of consumption
        cbar = (1 - β) * (S_y @ rm @ x0 - b0)
        c_hist = np.ones(T) * cbar

        # Debt
        x_hist, y_hist = lss.simulate(T)
        b_hist = np.squeeze(S_y @ rm @ x_hist - cbar / (1 - β))


        return c_hist, b_hist, np.squeeze(y_hist), x_hist


    # Define parameters
    N_simul = 150
    α, ρ1, ρ2 = 10.0, 0.9, 0.0
    σ = 1.0

    A = np.array([[1., 0., 0.],
                [α,  ρ1, ρ2],
                [0., 1., 0.]])
    C = np.array([[0.], [σ], [0.]])
    S_y = np.array([[1,  1.0, 0.]])
    β, b0 = 0.95, -10.0
    x0 = np.array([1.0, α / (1 - ρ1), α / (1 - ρ1)])

    # Do simulation for complete markets
    s = np.random.randint(0, 10000)
    np.random.seed(s)  # Seeds get set the same for both economies
    out = complete_ss(β, b0, x0, A, C, S_y, 150)
    c_hist_com, b_hist_com, y_hist_com, x_hist_com = out

    fig, ax = plt.subplots(1, 2, figsize=(15, 5))

    # Consumption plots
    ax[0].set_title('Cons and income', fontsize=17)
    ax[0].plot(np.arange(N_simul), c_hist_com, label='consumption')
    ax[0].plot(np.arange(N_simul), y_hist_com, label='income', alpha=.6, 
               linestyle='--')
    ax[0].legend()
    ax[0].set_xlabel('Periods')
    ax[0].set_ylim([-5.0, 110])

    # Debt plots
    ax[1].set_title('Debt and income')
    ax[1].plot(np.arange(N_simul), b_hist_com, label='debt')
    ax[1].plot(np.arange(N_simul), y_hist_com, label='Income', alpha=.6,
               linestyle='--')
    ax[1].legend()
    ax[1].axhline(0, color='k')
    ax[1].set_xlabel('Periods')

    plt.show()


Interpretation of Graph
-----------------------

In the above graph, please note that:

-  nonfinancial income fluctuates in a stationary manner.

-  consumption is completely constant.

-  the consumer's debt fluctuates in a stationary manner; in fact, in
   this case, because nonfinancial income is a first-order
   autoregressive process, the consumer's debt is an exact affine function
   (meaning linear plus a constant) of the consumer's nonfinancial
   income.


Tax-smoothing interpretation
-----------------------------

In the tax-smoothing interpretation of the preceding  complete markets consumption-smoothing model,  a government  faces a sequence of budget
constraints

.. math::

    T_t + b_t = g_t + \beta \mathbb E_t b_{t+1}, \quad t \geq 0

where :math:`T_t` is tax revenues, :math:`b_t` are receipts at :math:`t` from contingent claims that the government had *purchased* at time :math:`t`,
and 

.. math:: 

    \mathbb E_t b_{t+1} \equiv \int p_{t+1}(x_{t+1} | x_t) b_{t+1}(x_{t+1}) d x_{t+1}  

is the value of time :math:`t+1` state-contingent claims purchased  by the government  at time :math:`t`
    

As above with the consumption-smoothing model, we can solve the time :math:`t` budget constraint forward to obtain

.. math::

    b_t = \mathbb E_t  \sum_{j=0}^\infty \beta^j (g_{t+j} - T_{t+j} )

which can be rearranged to become

.. math::
 
    \mathbb E_t  \sum_{j=0}^\infty \beta^j g_{t+j}  = b_t + \sum_{j=0}^\infty \beta^j T_{t+j} 

which states that the present value of government purchases equals the value of government assets at :math:`t` plus the present value tax receipts   
    
   



Incomplete Markets Version
--------------------------


The incomplete markets version of the model with nonfinancial income being governed by a linear state space system
is described in the first lecture on the :doc:`permanent income model <perm_income>` and the followup
lecture on  the :doc:`permanent income model <perm_income_cons>`.

In that version, consumption follows a random walk and the consumer's debt follows a process with a unit root.

We leave it to the reader to apply the usual isomorphism to deduce the corresponding implications for a tax-smoothing model like Barro's :cite:`Barro1979`.



Government Manipulation of Arrow Securities Prices
--------------------------------------------------

In :doc:`optimal taxation in an LQ economy<lqramsey>` and :doc:`recursive optimal taxation <opt_tax_recur>`, we study **complete-markets**
models in which the government recognizes that it can manipulate  Arrow securities prices.


In :doc:`optimal taxation with incomplete markets <amss>`, we study an **incomplete-markets** model in which the government  manipulates asset prices.


New Examples
==========================

Here we bring in some new examples, as well as new code for solving for ex-post gross return and cumulative return on the portfolio of government assets.

Ex-Post Gross Return and Cumulative Return
------------------------------------------

Recall our formula for one period Arrow securities prices:

.. math::
    q(s_{t+1} = \bar s_j | s_t = \bar s_i ) = \beta P_{i,j}

Also, recall that in the complete markets setup, we computed optimal levels
for 

.. math::
    b_{t+1}(s_{t+1} = \bar s_j | s_t = s_i ) = b(\bar s_j) ,

which please note is independent of :math:`i` but depends on :math:`j`

At time :math:`t` in state :math:`s_t = \bar s_i`, the value of government assets (in the tax-smoothing version of the model) is

.. math::
    \beta \sum_{j=1}^N P_{i,j} b(\bar s_j)

and the ex post one-period gross return from :math:`t` to :math:`t+1` on the portfolio of government assets in state :math:`\bar s_j` at time :math:`t+1` is

.. math::
    R(\bar s_j | \bar s_i) = \frac{b(\bar s_j) }{ \beta \sum_{j'=1}^N P_{i,j} b(\bar s_{j'}) }


The cumulative return earned from putting :math:`1` unit on time :math:`t` goods into the market portfolio of government bonds is

.. math::
    R^T(s_{t+T}, s_{t+T-1}, \ldots, s_t) \equiv R(s_{t+1} | s_t) R (s_{t+2} | s_{t+1} )
    \cdots R(s_{t+T} | s_{t+T-1} )

.. code-block:: python3

    def ex_post_gross_return(b, cp):
        """
        calculate the ex post one-period gross return on the portfolio
        of government assets, given b and Q.
        """
        Q = cp.β * cp.P

        values = Q @ b

        n = len(b)
        R = np.zeros((n, n))

        for i in range(n):
            ind = cp.P[i, :] != 0
            R[i, ind] = b[ind] / values[i]

        return R

    def cumulative_return(s_path, R):
        """
        compute cumulative return from holding 1 unit market portfolio
        of government bonds, given some simulated state path.
        """
        T = len(s_path)

        RT_path = np.empty(T)
        RT_path[0] = 1
        RT_path[1:] = np.cumprod([R[s_path[t], s_path[t+1]] for t in range(T-1)])

        return RT_path

.. code-block:: python3

    class TaxSmoothingExample:
        """
        construct a tax smoothing example, by relabeling consumption problem class.
        """
        def __init__(self, g, P, b0, states, init=0, β=.96,
                     N_simul=150, random_state=None):

            self.states = states # state names
            self.cp = ConsumptionProblem(β, g, b0, P, init=init)

            # solve for complete market case
            self.T_bar, self.b = consumption_complete(self.cp)

            # solve for incomplete market case
            self.T_path, self.asset_path, self.g_path, self.s_path = \
                consumption_incomplete(self.cp, N_simul=N_simul,
                                       random_state=random_state)

            # calculate ex post gross return on government portfolio
            self.R = ex_post_gross_return(self.b, self.cp)

        def cumulative_return(self, s_path=None):

            if s_path is None:
                # if s_path not given, use the path in the incomplete market case
                s_path = self.s_path

            RT_path = cumulative_return(s_path, self.R)

            return RT_path

        def display(self):

            # plot graphs
            fig, ax = plt.subplots(1, 3, figsize=(15, 5))

            N = len(self.T_path)
            RT_path = self.cumulative_return()

            ax[0].set_title('Tax collection paths')
            ax[0].plot(np.arange(N), self.T_path, label='incomplete market')
            ax[0].plot(np.arange(N), self.T_bar * np.ones(N), label='complete market')
            ax[0].plot(np.arange(N), self.g_path, label='govt expenditures', alpha=.6, ls='--')
            ax[0].legend()
            ax[0].set_xlabel('Periods')

            ax[1].set_title('Government debt paths')
            ax[1].plot(np.arange(N), -self.asset_path, label='incomplete market')
            ax[1].plot(np.arange(N), -self.b[self.s_path], label='complete market')
            ax[1].plot(np.arange(N), self.g_path, label='govt expenditures', ls='--')
            ax[1].legend()
            ax[1].axhline(0, color='k', ls='--')
            ax[1].set_xlabel('Periods')

            ax[2].set_title('Cumulative return path (complete market)')
            ax[2].plot(np.arange(N), RT_path, color='b')
            ax[2].set_xlabel('Periods')
            ax[2].set_ylabel('Cumulative return', color='b')

            ax2_ = ax[2].twinx()
            ax2_.plot(np.arange(N), self.g_path, ls='--', color='g')
            ax2_.set_ylabel('Government expenditures', color='g')

            plt.show()

            # plot detailed information
            Q = self.cp.β * self.cp.P

            print(f"P \n {self.cp.P}")
            print(f"Q \n {Q}")
            print(f"Govt expenditures in {', '.join(self.states)} = {self.cp.y.flatten()}")
            print(f"Constant tax collections = {self.T_bar}")
            print(f"Govt debt in {len(self.states)} states = {-self.b}")

            print("")
            print(f"Government tax collections plus asset levels in {', '.join(self.states)}")
            for i in range(len(self.states)):
                TB = self.T_bar + self.b[i]
                print(f"  T+b in {self.states[i]} = {TB}")

            print("")
            print(f"Total government spending in {', '.join(self.states)}")
            for i in range(len(self.states)):
                G = self.cp.y[i, 0] + Q[i, :] @ self.b
                print(f"  {self.states[i]} = {G}")

            print("")
            print("Let's see ex-post and ex-ante returns on Arrow securities \n")

            print(f"Ex-post returns to purchase of Arrow securities:")
            for i in range(len(self.states)):
                for j in range(len(self.states)):
                    if Q[i, j] != 0.:
                        print(f"  π({self.states[j]}|{self.states[i]}) = {1/Q[i, j]}")

            print("")
            exant = 1 / self.cp.β
            print(f"Ex-ante returns to purchase of Arrow securities = {exant}")

            print("")
            print("The Ex-post one-period gross return on the portfolio of government assets")  
            print(self.R)

            print("")
            print("The cumulative return earned from holding 1 unit market portfolio of government bonds")
            print(RT_path[-1])

Parameters
----------

.. code-block:: python3

    γ = .1
    λ = .1
    ϕ = .1
    θ = .1
    ψ = .1
    g_L = .5
    g_M = .8
    g_H = 1.2
    β = .96

Example 1
---------

This example is designed to emulate the Civil War and WWI

.. math:: 
    P =
    \begin{bmatrix}
        1 - \lambda & \lambda  & 0    \cr
        0           & 1 - \phi & \phi \cr
        0           & 0        & 1
    \end{bmatrix}

where the government expenditure vector  :math:`g = \begin{bmatrix} g_L & g_H & g_M \end{bmatrix}` where :math:`g_L < g_M < g_H`.  Please assume :math:`b_0 = 0` and assume that the initial Markov state is state :math:`1` so that the system starts off in peace.

Please apply the code for both the complete and the incomplete markets tax-smoothing models and plot the outcomes.

.. code-block:: python3

    g_ex1 = [g_L, g_H, g_M]
    P_ex1 = np.array([[1-λ, λ,  0],
                      [0, 1-ϕ,  ϕ],
                      [0,   0,  1]])
    b0_ex1 = 1. # set b0 = 1
    states_ex1 = ['peace', 'war', 'postwar']

.. code-block:: python3

    ts_ex1 = TaxSmoothingExample(g_ex1, P_ex1, b0_ex1, states_ex1, random_state=1)
    ts_ex1.display()

Example 2
---------

This example captures a permanent peace.  

Here set

.. math::
    P =
    \begin{bmatrix}
        1    & 0        & 0      \cr
        0    & 1-\gamma & \gamma \cr
        \phi & 0        & 1-\phi
    \end{bmatrix}
                       
where the government expenditure vector :math:`g = \begin{bmatrix} g_L & g_L & g_H \end{bmatrix}` where :math:`g_L < g_H`. Please assume :math:`b_0 = 0` and assume that the initial Markov state is state :math:`2` so that the system starts off in a temporary peace.  

Please apply the code for both the complete and the incomplete markets tax-smoothing models and plot the outcomes. 

.. code-block:: python3

    g_ex2 = [g_L, g_L, g_H]
    P_ex2 = np.array([[1,   0,    0],
                      [0, 1-γ,    γ],
                      [ϕ,   0, 1-ϕ]])
    b0_ex2 = 1.
    states_ex2 = ['peace', 'temporary peace', 'war']

.. code-block:: python3

    ts_ex2 = TaxSmoothingExample(g_ex2, P_ex2, b0_ex2, states_ex2, init=1, random_state=1)
    ts_ex2.display()

Example 3
---------

Markov chain:

.. math::
    P = 
    \begin{bmatrix}
   		1 - \lambda & \lambda  & 0      & 0         \cr
        0           & 1 - \phi & \phi   & 0         \cr
        0           & 0        & 1-\psi & \psi      \cr
        \theta      & 0        & 0      & 1 - \theta
    \end{bmatrix}
                          
with government expenditure levels for the four states being
:math:`\begin{bmatrix} g_L & g_L & g_H & g_H \end{bmatrix}` where :math:`g_L < g_H`.
Please start with :math:`b_0 = 0` and :math:`s_0 = \bar s_1`. 

.. code-block:: python3

	g_ex3 = [g_L, g_L, g_H, g_H]
	P_ex3 = np.array([[1-λ,  λ,   0,    0],
	                  [0,  1-ϕ,   ϕ,     0],
	                  [0,    0,  1-ψ,    ψ],
	                  [θ,    0,    0,  1-θ ]])
	b0_ex3 = 1.
	states_ex3 = ['peace1', 'peace2', 'war1', 'war2']

.. code-block:: python3

	ts_ex3 = TaxSmoothingExample(g_ex3, P_ex3, b0_ex3, states_ex3, random_state=1)
	ts_ex3.display()


Example 4
---------

Markov chain:

.. math::
	P =
    \begin{bmatrix}
   		1 - \lambda & \lambda  & 0      & 0          & 0      \cr
		0           & 1 - \phi & \phi   & 0          & 0      \cr
        0           & 0        & 1-\psi & \psi       & 0      \cr
        0           & 0        & 0      & 1 - \theta & \theta \cr
        0           & 0        & 0      & 0          & 1
    \end{bmatrix}
                          
with government expenditure levels for the five states being
:math:`\begin{bmatrix} g_L & g_L & g_H & g_H & g_L \end{bmatrix}` where :math:`g_L < g_H`.
Please start with :math:`b_0 = 0` and :math:`s_0 = \bar s_1`.

.. code-block:: python3

	g_ex4 = [g_L, g_L, g_H, g_H, g_L]
	P_ex4 = np.array([[1-λ,  λ,   0,     0,    0],
	                  [0,  1-ϕ,   ϕ,     0,    0],
	                  [0,    0,  1-ψ,    ψ,    0],
	                  [0,    0,    0,   1-θ,   θ],
	                  [0,    0,    0,     0,   1]])
	b0_ex4 = 1.
	states_ex4 = ['peace1', 'peace2', 'war1', 'war2', 'forever peace']

.. code-block:: python3

	ts_ex4 = TaxSmoothingExample(g_ex4, P_ex4, b0_ex4, states_ex4, random_state=1)
	ts_ex4.display()

Example 5
---------

Markov chain:

.. math::
    P =
    \begin{bmatrix}
   		0 & 1 & 0 & 0 & 0 & 0 & 0 \cr
        0 & 0 & 1 & 0 & 0 & 0 & 0 \cr
        0 & 0 & 0 & 1 & 0 & 0 & 0 \cr
        0 & 0 & 0 & 0 & 1 & 0 & 0 \cr
        0 & 0 & 0 & 0 & 0 & 1 & 0 \cr
        0 & 0 & 0 & 0 & 0 & 0 & 1 \cr
        0 & 0 & 0 & 0 & 0 & 0 & 1 \cr
    \end{bmatrix}
                          
with government expenditure levels for the seven states being
:math:`\begin{bmatrix} g_L & g_L & g_H & g_H &  g_H & g_H & g_L \end{bmatrix}` where
:math:`g_L < g_H`. Please start with :math:`b_0 = 0` and :math:`s_0 = \bar s_1`.

.. code-block:: python3

	g_ex5 = [g_L, g_L, g_H, g_H, g_H, g_H, g_L]
	P_ex5 = np.array([[0, 1, 0, 0, 0, 0, 0],
	                  [0, 0, 1, 0, 0, 0, 0],
	                  [0, 0, 0, 1, 0, 0, 0],
	                  [0, 0, 0, 0, 1, 0, 0],
	                  [0, 0, 0, 0, 0, 1, 0],
	                  [0, 0, 0, 0, 0, 0, 1],
	                  [0, 0, 0, 0, 0, 0, 1]])
	b0_ex5 = 1.
	states_ex5 = ['peace1', 'peace2', 'war1', 'war2', 'war3', 'forever peace']

.. code-block:: python3

	ts_ex5 = TaxSmoothingExample(g_ex5, P_ex5, b0_ex5, states_ex5, N_simul=7, random_state=1)
	ts_ex5.display()
