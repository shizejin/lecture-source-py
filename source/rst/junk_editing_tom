and Barro :cite:`Barro1979`

and Barro :cite:`Barro1979` both

Barro :cite:`Barro1979` made an analogous assumption about the risk-free interest
rate in a tax-smoothing model that turns out to have the same mathematical structure as Hall's
consumption-smoothing model.



To get Barro's model from Hall's, all we have to do is to rename variables

While we are equally interested in consumption-smoothing and tax-smoothing
models, in this lecture  we mostly focus mainly on  consumption-smoothing
versions of these models.

But for each version of a consumption-smoothing model, there is a tax-smoothing counterpart obtained simply by

*  relabeling consumption as tax collections

*  relabeling a consumer's  nonfinancial income as a government's purchases

*  relabeling a consumer's *debt* as a government's *assets*

For elaborations on this theme, please see :doc:`perm_income_cons` and later parts of this lecture.

and  a warm-up for a model of tax smoothing described in :doc:`opt_tax_recur`.

Linear-quadratic versions of the Lucas-Stokey tax-smoothing model are described in :doc:`lqramsey`.

* In :doc:`lqramsey` and :doc:`opt_tax_recur`, the decision-maker -- the government in the case of these lectures -- recognizes that its decisions affect prices.

So these later lectures are partly about how a government  optimally  manipulate prices of government debt, albeit indirectly via the effects that distorting
taxes have on equilibrium prices and allocations



Background
==========

Outcomes in consumption-smoothing  models emerge from two
sources:

*  a decision-maker -- a consumer in the consumption-smoothing model or
   a government in the tax-smoothing model -- who wants to maximize an
   intertemporal objective function that expresses its preference for
   paths of consumption (or tax collections) that are *smooth* in the
   sense of  varying as little as possible across time and realized Markov states

*  a set of trading opportunities that allow the optimizer to transform
   a possibly erratic nonfinancial income (or government expenditure)
   process into a smoother consumption (or tax collections) process by
   purchasing or selling financial securities




Remark About Isomorphism
^^^^^^^^^^^^^^^^^^^^^^^^


We can regard these as tax-smoothing models if we set
:math:`c_t = T_t` and :math:`G_t = y_t`, where :math:`T_t` is total tax
collections and :math:`\{G_t\}` is an exogenous government expenditures
process.

As mentioned earlier, for much of this lecture we shall focus on the consumption-smoothing interpretation of our models.


 and Barro :cite:`Barro1979`


   * For those who love history, President Jefferson's Secretary of Treasury Albert Gallatin (1807) :cite:`Gallatin` advocated what amounts to Barro's model

GGHHGGHH


Relabeling Variables to get tax-smoothing interpretations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


We can  relabel variables to acquire tax-smoothing interpretations of the complete markets and incomplete markets consumption-smoothing models




.. code-block:: python3

    fig, ax = plt.subplots(1, 2, figsize=(15, 5))

    ax[0].set_title('Tax collection paths')
    ax[0].plot(np.arange(N_simul), c_path, label='incomplete market')
    ax[0].plot(np.arange(N_simul), c_bar * np.ones(N_simul), label='complete market')
    ax[0].plot(np.arange(N_simul), y_path, label='govt expenditures', alpha=.6, ls='--')
    ax[0].legend()
    ax[0].set_xlabel('Periods')
    ax[0].set_ylim([1.4, 2.1])

    ax[1].set_title('Government assets paths')
    ax[1].plot(np.arange(N_simul), debt_path, label='incomplete market')
    ax[1].plot(np.arange(N_simul), debt_complete[s_path], label='complete market')
    ax[1].plot(np.arange(N_simul), y_path, label='govt expenditures', ls='--')
    ax[1].legend()
    ax[1].axhline(0, color='k', ls='--')
    ax[1].set_xlabel('Periods')

    plt.show()






Example: Tax Smoothing with Complete Markets
============================================

It is instructive  to focus on a simple tax-smoothing example with complete markets.

This example will illustrate how, in a complete markets model like that of Lucas and Stokey :cite:`LucasStokey1983`, the government purchases
insurance from the private sector.

Purchasing insurance  protects the government against having to  raise taxes too high when  emergencies make governments high.

We assume that government expenditures take one of two values :math:`G_1 < G_2`, where Markov state :math:`1` means "peace" and Markov state :math:`2` means "war".

The government budget constraint in Markov state :math:`i` is

.. math::

    T_i + b_i = G_i + \sum_j Q_{ij} b_j


where

.. math::

    Q_{ij} = \beta P_{ij}


is the price of one unit of goods when tomorrow's Markov  state is  :math:`j` and when
today's Markov state is :math:`i`

:math:`b_i` is the quantity of the government's
level of *assets* in Markov state :math:`i`.

That is, :math:`b_i` equals  one-period state-contingent claims owed to the government that fall due at time :math:`t`.

Thus, if :math:`b_i < 0`, it means the government **owes** :math:`-b_i` to the private sector when the economy arrives in Markov state :math:`i`.

In our examples below, this  happens when in a previous war-time  period the government has sold an Arrow securities paying off :math:`- b_i`
in peacetime Markov state :math:`i`


Returns on state-contingent debt
=================================

The *ex post* one-period gross return on the portfolio of government assets  held from state :math:`i` at time :math:`t`
to state :math:`j` at time :math:`t+1`  is

.. math::
    R(j | i) = \frac{b(j) }{ \sum_{j'=1}^N Q_{ij'} b(j') }

where :math:`\sum_{j'=1}^N Q_{ij'} b(j')` is the total government expenditure on one-period state-contingent claims in state :math:`i` at time :math:`t`.

The cumulative return earned from putting :math:`1` unit of time :math:`t` goods into the government portfolio of state-contingent securities at
time :math:`t` and then rolling over the proceeds into the government portfolio each period thereafter is

.. math::
    R^T(s_{t+T}, s_{t+T-1}, \ldots, s_t) \equiv R(s_{t+1} | s_t) R (s_{t+2} | s_{t+1} )
    \cdots R(s_{t+T} | s_{t+T-1} )

Below we define two functions that calculate these return rates.

**Convention:**  When :math:`P_{ij}=0`,  we arbitrarily set :math:`R(j | i)` to be :math:`0`.



.. code-block:: python3

    def ex_post_gross_return(b, cp):
        """
        calculate the ex post one-period gross return on the portfolio
        of government assets, given b and Q.
        """
        Q = cp.β * cp.P

        values = Q @ b

        n = len(b)
        R = np.zeros((n, n))

        for i in range(n):
            ind = cp.P[i, :] != 0
            R[i, ind] = b[ind] / values[i]

        return R

    def cumulative_return(s_path, R):
        """
        compute cumulative return from holding 1 unit market portfolio
        of government bonds, given some simulated state path.
        """
        T = len(s_path)

        RT_path = np.empty(T)
        RT_path[0] = 1
        RT_path[1:] = np.cumprod([R[s_path[t], s_path[t+1]] for t in range(T-1)])

        return RT_path

As above, we'll assume that the initial Markov state is state :math:`1`, which means we start from a state of peace.

The government  then experiences 3 time periods of war and come back to peace again.

The history of states is therefore :math:`\{ peace, war, war, war, peace \}`.

In addition, as indicated above, to simplify our example, we'll set the government's initial
asset level to :math:`1`, so that :math:`b_1 = 1`.

Here's our code to compute a quantitative example  intialized to have government assets being one in an initial peace time state:

.. code-block:: python3

    # Parameters
    β = .96

    # change notation y to g in the tax-smoothing example
    g = [1, 2]
    b0 = 1
    P = np.array([[.8, .2],
                  [.4, .6]])

    cp = ConsumptionProblem(β, g, b0, P)
    Q = β * P

    # change notation c_bar to T_bar in the tax-smoothing example
    T_bar, b = consumption_complete(cp)
    R = ex_post_gross_return(b, cp)
    s_path = [0, 1, 1, 1, 0]
    RT_path = cumulative_return(s_path, R)

    print(f"P \n {P}")
    print(f"Q \n {Q}")
    print(f"Govt expenditures in peace and war = {g}")
    print(f"Constant tax collections = {T_bar}")
    print(f"Govt debts in two states = {-b}")

    msg = """
    Now let's check the government's budget constraint in peace and war.
    Our assumptions imply that the government always purchases 0 units of the
    Arrow peace security.
    """
    print(msg)

    AS1 = Q[0, :] @ b
    # spending on Arrow security
    # since the spending on Arrow peace security is not 0 anymore after we change b0 to 1
    print(f"Spending on Arrow security in peace = {AS1}")
    AS2 = Q[1, :] @ b
    print(f"Spending on Arrow security in war = {AS2}")

    print("")
    # tax collections minus debt levels
    print("Government tax collections minus debt levels in peace and war")
    TB1 = T_bar + b[0]
    print(f"T+b in peace = {TB1}")
    TB2 = T_bar + b[1]
    print(f"T+b in war = {TB2}")

    print("")
    print("Total government spending in peace and war")
    G1 = g[0] + AS1
    G2 = g[1] + AS2
    print(f"Peace = {G1}")
    print(f"War = {G2}")

    print("")
    print("Let's see ex-post and ex-ante returns on Arrow securities")

    Π = np.reciprocal(Q)
    exret = Π
    print(f"Ex-post returns to purchase of Arrow securities = \n {exret}")
    exant = Π * P
    print(f"Ex-ante returns to purchase of Arrow securities \n {exant}")

    print("")
    print("The Ex-post one-period gross return on the portfolio of government assets")
    print(R)

    print("")
    print("The cumulative return earned from holding 1 unit market portfolio of government bonds")
    print(RT_path[-1])


Explanation
-----------

In this example, the government always purchase :math:`1` units of the
Arrow security that pays off in peace time (Markov state :math:`1`).

And it purchases a higher amount of the security that pays off in war
time (Markov state :math:`2`).

We recommend plugging the quantities computed above into the government
budget constraints in the two Markov states and staring.

This is an example in which

*  during peacetime, the government purchases *insurance* against the possibility that war breaks out next period

*  during wartime, the government purchases *insurance* against the possibility that war continues another period

*  the return  on the insurance against war is low so long as peace continues

*  the return  on the insurance against war  is high when war breaks out or continues

*  given the history of states that  we assumed, the value of one unit of the portfolio of government assets will double in the end because of high returns during wartime.

*Exercise:* try changing the Markov transition matrix so that

.. math::

    P = \begin{bmatrix}
            1 & 0 \\
           .2 & .8
        \end{bmatrix}


Also, start the system in Markov state :math:`2` (war) with initial
government assets :math:`- 10`, so that the government starts the
war in debt and :math:`b_2 = -10`.

We provide further examples of tax-smoothing models with a finite Markov state in the lecture :doc:`More Finite Markov Chain Tax-Smoothing Examples <smoothing_tax>`.



GGHHGGHH



Tax-smoothing interpretation
-----------------------------

In the tax-smoothing interpretation of the preceding  complete markets consumption-smoothing model,  a government  faces a sequence of budget
constraints

.. math::

    T_t + b_t = g_t + \beta \mathbb E_t b_{t+1}, \quad t \geq 0

where :math:`T_t` is tax revenues, :math:`b_t` are receipts at :math:`t` from contingent claims that the government had *purchased* at time :math:`t`,
and

.. math::

    \mathbb E_t b_{t+1} \equiv \int p_{t+1}(x_{t+1} | x_t) b_{t+1}(x_{t+1}) d x_{t+1}

is the value of time :math:`t+1` state-contingent claims purchased  by the government  at time :math:`t`


As above with the consumption-smoothing model, we can solve the time :math:`t` budget constraint forward to obtain

.. math::

    b_t = \mathbb E_t  \sum_{j=0}^\infty \beta^j (g_{t+j} - T_{t+j} )

which can be rearranged to become

.. math::

    \mathbb E_t  \sum_{j=0}^\infty \beta^j g_{t+j}  = b_t + \mathbb E_t \sum_{j=0}^\infty \beta^j T_{t+j}

which states that the present value of government purchases equals the value of government assets at :math:`t` plus the present value tax receipts




GGHHGGHH




Government Manipulation of Arrow Securities Prices
--------------------------------------------------

In :doc:`optimal taxation in an LQ economy<lqramsey>` and :doc:`recursive optimal taxation <opt_tax_recur>`, we study **complete-markets**
models in which the government recognizes that it can manipulate  Arrow securities prices.


In :doc:`optimal taxation with incomplete markets <amss>`, we study an **incomplete-markets** model in which the government  manipulates asset prices.

GGHHGGHH


We leave it to the reader to apply the usual isomorphism to deduce the corresponding implications for a tax-smoothing model like Barro's :cite:`Barro1979`.

